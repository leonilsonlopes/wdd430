{"ast":null,"code":"import { EventEmitter } from '@angular/core';\nimport { MOCKDOCUMENTS } from './MOCKDOCUMENTS';\nimport * as i0 from \"@angular/core\";\nexport let DocumentService = /*#__PURE__*/(() => {\n  class DocumentService {\n    constructor() {\n      this.documents = [];\n      this.documentSelectedEvent = new EventEmitter();\n      this.documentChangedEvent = new EventEmitter();\n      this.documentListChangedEvent = new EventEmitter();\n      this.Subject = [];\n      this.documents = MOCKDOCUMENTS;\n      this.maxDocumentId = this.getMaxId();\n    }\n\n    getDocuments() {\n      return this.documents.slice();\n    }\n\n    getDocument(id) {\n      if (!document) {\n        return null;\n      }\n\n      for (let document of this.documents) {\n        if (document.id === id) {\n          return document;\n        }\n      }\n\n      return null;\n    }\n\n    getMaxId() {\n      let maxId = 0;\n\n      for (let document of this.documents) {\n        let currentId = parseInt(document.id);\n        if (currentId > maxId) maxId = currentId;\n      }\n\n      return maxId;\n    }\n\n    addDocument(newDocument) {\n      if (newDocument === undefined || newDocument === null) {\n        return;\n      } else {\n        this.maxDocumentId++;\n        newDocument.id = this.maxDocumentId.toString();\n        this.documents.push(newDocument);\n        let documentsListClone = this.documents.slice();\n        this.documentListChangedEvent.next(documentsListClone);\n      }\n    }\n\n    updateDocument(originalDocument, newDocument) {\n      if (originalDocument === undefined || originalDocument === null || newDocument === undefined || newDocument === null) {\n        return;\n      } else {\n        const pos = originalDocument.id;\n        this.documents[parseInt(pos)] = newDocument;\n        let documentsListClone = this.documents.slice();\n        this.documentListChangedEvent.next(documentsListClone);\n      }\n    }\n\n    deleteDocument(document) {\n      if (document === undefined || document === null) {\n        return;\n      }\n\n      const pos = this.documents.indexOf(document);\n      if (pos < 0) return;\n      this.documents.splice(pos, 1);\n      let documentsListClone = this.documents.slice();\n      this.documentListChangedEvent.next(documentsListClone);\n    }\n\n  }\n\n  DocumentService.ɵfac = function DocumentService_Factory(t) {\n    return new (t || DocumentService)();\n  };\n\n  DocumentService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: DocumentService,\n    factory: DocumentService.ɵfac,\n    providedIn: 'root'\n  });\n  return DocumentService;\n})();","map":null,"metadata":{},"sourceType":"module"}